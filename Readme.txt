Hospital Management System

This project is a web-based Hospital Management System built using Flask and MySQL. The system allows users to manage various hospital-related data, including patient information, doctor details, and bioinformatics records. The application interacts with a MySQL database to store and retrieve data, providing an easy-to-use interface to interact with records such as patient details, doctor information, and bioinformatics data for patients. The goal of the project is to streamline hospital management by providing a digital platform for maintaining and updating essential records.

The system features a homepage that acts as a welcome page and includes navigation links to different sections of the application. The **Patients** section allows for the addition and viewing of patient details, including basic information like name, date of birth, gender, and contact information. The **Doctors** section provides functionality to add and view doctor details, including their specialty and contact information. The **Bioinformatics** section is designed to store and manage bioinformatics data related to patients, including gene sequences and analysis results.

The project uses **Flask**, a Python web framework, for the backend, while the frontend is built using HTML, CSS, and JavaScript (rendered through Flask templates). For the database, **MySQL** is used to store data, with tables for patients, doctors, and bioinformatics records. The project also utilizes **Font Awesome** for icons in the user interface, making the application visually appealing and easy to navigate.

To set up the project, you need to install the necessary Python dependencies, which can be done using the command `pip install flask mysql-connector-python`. You will also need to create a MySQL database named `PGR_207528_177` and create the required tables for patients, doctors, and bioinformatics records. These steps are detailed in the setup section of the README. Once the database is set up, you can configure the connection settings in the `hospital.py` file by updating the `DB_CONFIG` dictionary with your MySQL credentials.

After setting up the environment, you can run the application with the command `python hospital.py`. The app will be available at `http://127.0.0.1:5000`, where you can interact with the different pages: the homepage, patients page, doctors page, and bioinformatics page. There are also routes for submitting patient, doctor, and bioinformatics data to the database via POST requests.

In summary, this project provides a simple yet effective way to manage hospital-related data in a digital format, improving efficiency and accessibility of essential information. It allows for easy addition and management of patient and doctor details, as well as the storage of bioinformatics records associated with each patient.
